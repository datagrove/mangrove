package logdb

// the interesting bits of this will mostly be ported to typescript
// Locks are just sites for now?
type StreamLock struct {
	Sid    int64
	Key    []byte // not used
	Length int64
}

// the write always succeeds
// the lock only succeeds if the length is correct
type StreamTx struct {
	Lock  []StreamLock
	Write []struct {
		Sid  int64
		Data []byte
	}
}
type StreamTxResult struct {
	Offset       []int64
	WriteSuccess bool
	LockSuccess  bool
}


type StorageModel interace {

}

func NewRemoteStorageModel(sock SockLike) *RemoteStorageModel {
	return &RemoteStorageModel{sock:sock}
}

type SockLike interface {
	Send(v interface{}) error
	Listen(fn: func(v interface{})) 
}

type TableRange struct {
	Site int64
	Table string
	From, To []byte
	Offset, Limit int64
}

type Subscription struct {
	TableRange
}
// A Db has to manage both a local store and a remote log
type Db struct {
	remote LogModel 
	local StorageModel

	Login(did string) error
	Commit(tx *Tx) (*TxResult,error)
	Join(did string) error
	Leave(did string) error
	Subscribe(sub *Subscription) error
	Unsubscribe(sub *Subscription) error
}


type Tx struct {
	Lock []Lock
}
type TxResult struct {
}

type LogDb struct {
	model StorageModel

}

func NewLogDb(model StorageModel) (*LogDb,error) {
	return &LogDb{model:model},nil

}

// 