export async function AuthorizeDevice(keypair: EdKeypair, device: string) {
  const ucan = await ucans.build({
    audience: device, // recipient DID
    issuer: keypair, // signing key
    capabilities: [ // permissions for ucan
      {
        with: { scheme: "login", hierPart: keypair.did() },
        can: { namespace: "login", segments: ["LOGIN"] }
      },
    ]
  })
  const token = ucans.encode(ucan) // base64 jwt-formatted auth token 
  return token
}
export async function createDevice() {
  const a = security()
  const keypair = await ucans.EdKeypair.create({ exportable: true })
  a.deviceName = keypair.did()
  a.devicePrivate = await keypair.export("base58btc")
  a.deviceDid = keypair.did()
  setWelcome(true)
  setSecurity(a)
}

// we need to create the user deterministically from the seed
export async function createUser(seed: string, bip39: boolean) {
  const b = bip39 ? await bip39seed(seed.toString()) : await passwordSeed(seed.toString())
  const kp = ed25519.generateKeyPairFromSeed(b)
  const user = new EdKeypair(kp.secretKey, kp.publicKey, true)
  const a = security()
  const ucan = await ucans.build({
    audience: a.deviceDid, // recipient DID
    issuer: user, // signing key
    capabilities: [ // permissions for ucan
      {
        with: "login://" + user.did() as any,
        can: "*"
      }
    ]
  })

  a.user = {
    name: 'Anonymous',
    did: user.did(),
    private: await user.export("base58btc"),
    ucanLogin: ucans.encode(ucan),
    bip39: bip39
  }
  setSecurity(a)
}

// auto login uses a stored token to skip the signin button
// there are lots of variations on this theme, "sign out of all tabs"
export async function tryToLogin() {
  let a = security()
  if (a.deviceDid == "") {
    await createDevice()
  }
  // else {
  //   if (a.autoconnectUntil == 0 || a.autoconnectUntil > Date.now()) {
  //     setLogin(true)
  //   }
  // }
}
tryToLogin()