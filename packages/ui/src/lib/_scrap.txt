

      // const key = await crypto.subtle.importKey(
      //   "jwk",
      //   s.privateKey,
      //   {
      //     name: "ECDSA",
      //     namedCurve: "P-256",
      //   },
      //   true,
      //   ["sign", "verify"]
      // );

      // import the private key 
      // we have enough information to try to login
      // we get a challenge from the server, maybe send this immediately on websocket connection. we can use chained hashes potentially to make it faster (send the hash of the previous challenge)

      const dataBuffer = new TextEncoder().encode(ws.challenge);

      // Sign the data using the private key
      const signatureBuffer = await crypto.subtle.sign(
        {
          name: 'RSASSA-PKCS1-v1_5',
        },
        key,
        dataBuffer
      );
      const signatureArray = new Uint8Array(signatureBuffer);

            const r = await ws.rpc<{ token: string }>('autologin', {
        user: s.username,
        device: s.deviceName,
        signature: signatureArray
      })



async function tryToLogin() {

  if (a) {
    const s = JSON.parse(a) as Security
    setSecurity(s)
    if (s.username && s.deviceName) {
      // try auto logon by signing the challenge.
      // we use the device key and issue a "ucan talk to us on this websocket with this session id"
      await ucanConnect()

      if (r.token) {
        setToken(r.token)

        return
      }
    }

    setTryLogin(true)
  }


  // generate a device identity
  // let keyPair = await window.crypto.subtle.generateKey(
  //   {
  //     name: "ECDSA",
  //     namedCurve: "P-384",
  //   },
  //   true,
  //   ["sign", "verify"]
  // );
  // const publicKeyJwk = await window.crypto.subtle.exportKey("jwk", keyPair.publicKey);
  // const privateKeyJwk = await window.crypto.subtle.exportKey("jwk", keyPair.privateKey);



  // fail the autologin, no information to go on.
  setTryLogin(false)

}