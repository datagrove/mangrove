/*
export default function Nav(props: { docsMode: "start" | "regular" }) {
  const [showMenu, setShowMenu] = createSignal(false);
  const location = useLocation();

  createEffect((prev) => {
    if (location.pathname !== prev) {
      setShowMenu(false);
    }
    return location.pathname;
  });

  return (
    <div class="lg:max-h-screen lg:sticky lg:top-0 no-bg-scrollbar lg:max-w-sm w-full shadow lg:shadow-none z-50 overflow-y-auto flex flex-col gap-8">
      <div class="flex flex-col gap-4">
        <NavHeader
          docsMode={props.docsMode}
          showMenu={showMenu()}
          setShowMenu={setShowMenu}
        />
      </div>
      {/* <div id="docsearch"></div> */}
      <div class="hidden md:block">
        <NavPreferences id="desktop" />
      </div>
      <div
        classList={{
          hidden: !showMenu(),
          "lg:block border-b md:border-none border-solid-lightitem dark:border-solid-darkitem pb-4":
            true,
        }}
      >
        <Show when={props.docsMode === "regular"} fallback={<StartMenu />}>
          <TopMenu />
        </Show>
      </div>
      {/* <div class="my-2" classList={{ hidden: props.docsMode == "regular" }}>
        <div id="docsearch" />
      </div> */}
      <div class="md:hidden">
        <NavPreferences id="mobile" />
      </div>
    </div>
  );
} */



function TopMenu() {
  return (
    <aside class="w-full">
      <nav class="scrolling-touch scrolling-gpu" style="--bg-opacity:0.2;">
        <Routes>
          <Route
            path={"/references/**/*"}
            component={ReferenceNav}
          />
          <Route
            path={"/guides/**/*"}
            component={GuidesNav}
          />
          <Route path="/**/*" component={GuidesNav} />
        </Routes>
      </nav>
    </aside>
  );
}

const START_SECTIONS = [];

const allStartSections: Record<"title" | "link", string>[] = [];
for (const section of START_SECTIONS) {
  for (const subsection of section.subsections) {
    allStartSections.push({
      link: section.link + subsection.link,
      title: `${section.header} â€” ${subsection.header}`,
    });
  }
}

export function getStartSection(pathname: string) {
  const current = allStartSections.findIndex((section) =>
    pathname.startsWith(section.link)
  );
  if (current === allStartSections.length - 1 || current === -1) {
    return undefined;
  }
  return allStartSections[current + 1];
}

export function getNextPrevPages(pathname: string, sections:SECTIONS) {
  const allGuidesSections = getAllSections(sections);
  let nextPrevPages:SECTION_LEAF_PAGE[] = []

  const currentPageIndex = allGuidesSections.findIndex(v => v.link.startsWith(pathname))
  const nextPage = allGuidesSections[currentPageIndex+1]
  const prevPage = allGuidesSections[currentPageIndex-1]

  nextPrevPages.push(...[prevPage, nextPage])

  return nextPrevPages;
}

function getAllSections(
  sections: SECTIONS | (SECTION_PAGE | SECTION_LEAF_PAGE)[]
):SECTION_LEAF_PAGE[] {
  let allSections:SECTION_LEAF_PAGE[] = [];

  for (const section in sections) {
    const doesSectionContainPages = sections[section].pages !== undefined;
    if (doesSectionContainPages) {
      for (const page of sections[section].pages) {
        const doesPageContainInnerPages =
          (page as SECTION_PAGE).pages !== undefined;
        if (doesPageContainInnerPages) {
          allSections.push(...getAllSections((page as SECTION_PAGE).pages));
        } else {
          allSections.push(page);
        }
      }
    } else {
      allSections.push(sections[section]);
    }
  }

  return allSections;
}




function StartMenu() {
  return (
    <ul class="m-5 nav">
      <For each={START_SECTIONS}>
        {(section) => (
          <li class="mb-6">
            <span class="font-bold mb-2 block">{section.header}</span>
            <ul>
              <For each={section.subsections}>
                {(subsection: any) => (
                  <>
                    <li class="px-2 my-1 py-0">
                      <NavLink
                        style="font-size: 0.95rem"
                        class="hover:underline"
                        activeClass="text-solid-default font-bold"
                        href={section.link + subsection.link}
                      >
                        {subsection.header}
                      </NavLink>
                    </li>
                    <Show when={subsection.subsections?.length}>
                      <ul class="px-2">
                        <For each={subsection.subsections}>
                          {(item: any) => (
                            <>
                              <li class="pl-4 my-1 py-0">
                                <NavLink
                                  style="font-size: 0.85rem"
                                  class="hover:underline"
                                  activeClass="text-solid-default font-bold"
                                  href={section.link + item.link}
                                >
                                  {item.header}
                                </NavLink>
                              </li>
                            </>
                          )}
                        </For>
                      </ul>
                    </Show>
                  </>
                )}
              </For>
            </ul>
          </li>
        )}
      </For>
    </ul>
  );
}

function ReferenceNav() {
  return <SectionNav sections={REFERENCE_SECTIONS} />;
}

function GuidesNav() {
  return <SectionNav sections={GUIDES_SECTIONS} />;
}


export const SiteTabs = (props: {page: PageDescription})=>{
    const href = () => "";
    // the first piece of the 

    const sections = () => site.root.children
    // this should always give us a lang?
    const path = (e: Page) => props.page.lang + "/" + e.path??""
    // maybe we should limit this to four some how? maybe we should adaptively change the representation (chips?) if we have too many.

    const active ="bg-solid-light dark:bg-solid-dark font-semibold"

    const base="flex-1 inline-flex w-full p-2 items-center justify-center whitespace-nowrap first:rounded-l-md border-r border-solid-lightborder dark:border-solid-darkitem hover:text-blue-500 hover:underline last:(rounded-r-md border-0)"

    const selected = 1

    return  (
    <div           class="w-full mt-2 flex border border-solid-lightborder dark:border-solid-darkitem rounded-md"
>    <For each={sections()}>{(e,index)=>(
        <a
        classList={{
          [props.class]: true,
          [props.activeClass]: props.isActive(location),
          //[props.inactiveClass]: !props.isActive(location),
        }}
      >
        {e.name}
        </a>)
    }</For></div>)
}
