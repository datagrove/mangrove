import { A as Ar, useNavigate } from "@solidjs/router"
import { Component, JSXElement, Show, createEffect, createSignal, onMount } from "solid-js"
import {
    parseCreationOptionsFromJSON,
    create,
    get,
    parseRequestOptionsFromJSON,
    supported,
    AuthenticationPublicKeyCredential,
} from "@github/webauthn-json/browser-ponyfill";
import { type PublicKeyCredentialDescriptorJSON } from "@github/webauthn-json";
import { RegistrationPublicKeyCredential } from "@github/webauthn-json/browser-ponyfill"
import type { RegistrationResponseExtendedJSON } from "@github/webauthn-json/browser-ponyfill/extended"
import { A, P } from '../lib/nav'
import { createWs } from "../lib/socket";
import { Ws } from "../lib/socket";
import { BlueButton, Center, Checkbox, FieldSet, Input, TextDivider, ToggleSection } from "../lib/form";
import { LoginWith } from "../lib/login_with";
import { bufferToHex } from "../lib/encode";
import {  generatePassPhrase, isMobile, security, setUser, ucanFromBip39 } from "../lib/crypto";

// skip if we have a token to stay logged in
export const RegisterPage = () => {
    const ws = createWs();
    const navigate = useNavigate();
    const [nameOk, setNameOk] = createSignal(false)
    const mn = generatePassPhrase()
    const [userPrefix, setUserPrefix] = createSignal("")
    const [fullUser, setFullUser] = createSignal("")
    const sec = security()


    const register = (e: MessageEvent) => {
        e.preventDefault()
        registerRemote()
    }

    // there is an inherent race here, (two users with the same name), but practically it's not a problem
    const validateUsername = async (x: string) => {
        setUserPrefix(x)

        let ok = false
        try {
            const o = await ws.rpc<{ suggest: string }>("okname", { id: x })
            console.log("o", o)
            setFullUser(o.suggest)
        } catch (e) {
            console.log("error", e)
        }
    }

    const [remember, setRemember] = createSignal(false)
    const [webauthn, setWebauthn] = createSignal(true)
    const [email, setEmail] = createSignal(false)
    const [phone, setPhone] = createSignal(false)
    const [password, setPassword] = createSignal(false)
    const [email2, setEmail2] = createSignal("")
    const [phone2, setPhone2] = createSignal("")
    const [password2, setPassword2] = createSignal("")
    const [pin, setPin] = createSignal(false)
    const [pin2, setPin2] = createSignal("")
    const [oauth, setOauth] = createSignal(false)
    const [totp, setTotp] = createSignal(false)
    const [device, setDevice] = createSignal("")
    const suggestedName = () => {
        const u = userPrefix()
        if (u) {
            return u + "'s computer"
        } else {
            return "My computer"
        }
    }
    const willuse = () => {
        return fullUser()?`${fullUser()} is available`:""
    }
    return <Center>
        <form>
            <div class="space-y-6">

                <Input autofocus name="user" label="User" value='' onInput={validateUsername} />
                <div>{willuse()}</div>



                <BlueButton disabled={!fullUser()} onClick={register} >Register</BlueButton>
            </div>
        </form>
    </Center>
}

/*
                <Input name="device" placeholder={suggestedName()} label="Device Name" value='' onInput={setDevice} />

                <TextDivider>Account recovery</TextDivider>

                <P class='text-green-300'>{mn}</P>
                <div class='italic'>Write down your secret phrase. It is not stored anywhere so this is your only opportunity.</div>


                <TextDivider>Sign in options</TextDivider>
                <div class='mt-1'> <A href=''>Tell me more</A> </div>

                <Checkbox value={webauthn} setValue={setWebauthn} title='No password  (Webauthn)' >Webauthn generally uses tokens or biometrics to log in</Checkbox>


                    <Checkbox value={remember} setValue={setRemember} title='Trusted Computer' >Remember for 30 days</Checkbox>
                <Checkbox value={password} setValue={setPassword} title='Password' >Allow Password</Checkbox>
                    <Show when={password()}>
                        <Input type='password' value={password2()} name="phone" placeholder="Password" />
                        <Input type='password' value={password2()} name="phone" placeholder="Confirm" />
                    </Show>
                    <Checkbox value={totp} setValue={setTotp} title='Time changing code' >Use Authy, Google Authenticator, or Microsoft Authenticator (Time based code) </Checkbox>
                    <Show when={totp()}>
                        <img src='qr.png'></img>
                    </Show>
                    <Checkbox value={oauth} setValue={setOauth} title='Sign in with Apple, Google, etc' >Sign in with Apple, Google, Twitter, or Github</Checkbox>
                    <Show when={oauth()}>
                        <LoginWith></LoginWith></Show>
                <TextDivider>RecoveryOptions</TextDivider>
             
                    <div class='mt-1'> <A href=''>Tell me more</A> </div>
                <FieldSet>

                    <Checkbox value={email} setValue={setEmail} title='Email recovery' >Allow email recovery</Checkbox>
                    <Show when={email()}>
                        <Input value={email2()} name="email" placeholder="Email" />
                    </Show>
                    <Checkbox value={phone} setValue={setPhone} title='Phone recovery' >Allow phone/text based recovery</Checkbox>
                    <Show when={phone()}>
                        <Input value={phone2()} name="phone" placeholder="Phone" />
                    </Show>

                    <Checkbox value={pin} setValue={setPin} title='PIN recovery' >Require PIN for recovery</Checkbox>
                    <Show when={pin()}>
                        <Input type='password' value={pin2()} name="pin" label="PIN" />
                        <Input type='password' value={pin2()} name="pin" label="Confirm" />
                    </Show>

                </FieldSet>


            </div></form>

    </Center>
}
*/