  

// share an lex document
/*
  <TabState>  // tab level state, starts shared worker
  <SyncPath path={ } fallback={loading}> // support suspense while loading
    <Editor>  // editor level state
        <Sync>
    </Editor>
  </SyncPath>
  </TabState>
*/

// one reason to make this a provider is that we can control the loading interface (fallback, etc)
// acts more like a signal than a resource?
// what do we do with the schema?

// use the features of localState, implicitly uses tabstate provider
// should return a function that can be used in createResource? should call createResource here?
// export async function createQuery<Key, Tuple>(t: QuerySchema<Key>,
//   q: Partial<ScanQuery<Key, Tuple>>,
//   listener: (s: ScanDiff) => void): Promise<RangeSource<Key, Tuple>> {
//   const db = useDg()!
//   const rs = await db.scan(t)
//   onCleanup(() => {
//     rs.api.close()
//   })
//   return rs
// }

// we need to open twice, essentially.
// the first open will absorb the big async hit, and will trigger suspense
// the second "subscribe"" will be when we have an editor ready to receive updates.
// we have to buffer the updates on the shared worker side, since it will await the updates to keep everything in sync

// when debugging we  can have more than one tab state in one tab
// there will be one cloud state so that can always be a global



  // we need to configure the server to use a local test server
  

  // the path here needs to give us the address of a cell in the database.
  // should it be structured, or parsed string? We probably need a string in any event so we can use it in the url
  // site.server.com/table?key{x}=value|value&attr=name
  // site.server.com/edit/proc/value/value/value
  // the procedure must return a table, row id, and column id; we can use this to uniquely identify the document. this can work together with range stabbing.
  // we can resolve this in the client, then pass the result to worker to keep complexity out of the worker.
  // we can reserve host 0 for being the origin host, site 0 can be the user's profile, and site 1 can be the subscription state




// maybe there should be a site provider, and ask that for a transaction? or maybe as an argument to begin with default derived from the page?

// Db is the cli version of tab state

