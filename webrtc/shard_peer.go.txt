package main

import (
	"unsafe"
)

// what about a replace owner operation? what about key rotation?
// read the file ids from a -2 page?
type RtxInvalidate struct {
	Txid int64
	FileId
	At int64 // -1 means append
	// data is not in the header, but is the payoad
}

// validate will trigger a reply on the peer that initiated the write.
type RtxValidate struct {
	Txid int64
	At   int64
}

func (v RtxInvalidate) toBytes() []byte {
	const sz = int(unsafe.Sizeof(RtxInvalidate{}))
	var asByteSlice []byte = (*(*[sz]byte)(unsafe.Pointer(&v)))[:]
	return asByteSlice
}

// if we get a file read, we can read it. If we get a file write, we first forward to the correct shard
// that shard will broadcast an invalidation (with the data) to all other shards.
// the owning shard will then send a validation with the correct position to all the shards.

// header can be 8 bytes, 4 for length, 2 for cpu, 2 for epoch
// zeus uses timestamp to decide races. here there are no races, other than potentially epoch.
// converting to

// each log shard manages it's own group commit
// each group commit must force certain pages to flush so that we don't write them twice
// record locks are expensive; they require io. Is it too expensive? should we force webrtc?
// we can cache, but if its not in memory that doesn't tell us anything.
/*
func (lg *LogShard) fromPeer(data []byte) {
	var tx TxPeer
	cbor.Unmarshal(data, &tx)
	// sending invalidate to peers could simply be the same packet
	ackToClient := func(tx *TxPeer) {
	}
	nackToClient := func(tx *TxPeer) {
	}

	// invalidate both gives the peer the data and tells them not to use it. We'll follup with a validate
	invalToPeers := func(tx *TxPeer) {
		i := Invalid{
			TxId:  tx.Id,
			LogId: tx.FileId,
			At:    tx.At,
			Data:  tx.Data,
		}
		data, _ := cbor.Marshal(i)
		_ = data
	}
	valToPeers := func(tx *TxPeer) {
		// not enough information here?

	}

	isPrimary := true
	if isPrimary {
		if tx.Continue {
			// tx is acknowledged by peers, now we can ack to client
			valToPeers(&tx)
			ackToClient(&tx)
			// publish to listeners

		} else {
			switch tx.Op {
			case Awrite:
				// client write to the object
				// we can write to the object, but cannot acknowledge to client until peers have acked
				// we need to create
				ok := false
				if !ok {
					nackToClient(&tx)
				} else {
					invalToPeers(&tx)
				}

			case Aflush_ack:
			}
		}
	}

}
*/
