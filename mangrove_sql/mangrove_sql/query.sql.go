// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package mangrove_sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const approveDevice = `-- name: ApproveDevice :exec
insert into mg.device_org (device,org) values ($1, $2)
`

type ApproveDeviceParams struct {
	Device string
	Org    string
}

func (q *Queries) ApproveDevice(ctx context.Context, arg ApproveDeviceParams) error {
	_, err := q.db.Exec(ctx, approveDevice, arg.Device, arg.Org)
	return err
}

const deleteDevice = `-- name: DeleteDevice :exec
delete from mg.device where device = $1
`

func (q *Queries) DeleteDevice(ctx context.Context, device string) error {
	_, err := q.db.Exec(ctx, deleteDevice, device)
	return err
}

const getDevice = `-- name: GetDevice :one
select device, webauthn from mg.device
where device = $1
`

func (q *Queries) GetDevice(ctx context.Context, device string) (MgDevice, error) {
	row := q.db.QueryRow(ctx, getDevice, device)
	var i MgDevice
	err := row.Scan(&i.Device, &i.Webauthn)
	return i, err
}

const insertDevice = `-- name: InsertDevice :exec
insert into mg.device (device, webauthn) values ($1, $2)
`

type InsertDeviceParams struct {
	Device   string
	Webauthn string
}

func (q *Queries) InsertDevice(ctx context.Context, arg InsertDeviceParams) error {
	_, err := q.db.Exec(ctx, insertDevice, arg.Device, arg.Webauthn)
	return err
}

const insertOrg = `-- name: InsertOrg :exec
insert into mg.org (org, name, is_user)
values ($1, $2, $3)
`

type InsertOrgParams struct {
	Org    string
	Name   pgtype.Text
	IsUser bool
}

func (q *Queries) InsertOrg(ctx context.Context, arg InsertOrgParams) error {
	_, err := q.db.Exec(ctx, insertOrg, arg.Org, arg.Name, arg.IsUser)
	return err
}

const insertPrefix = `-- name: InsertPrefix :exec
insert into mg.namePrefix (name,count) values ($1,0) on conflict do nothing
`

func (q *Queries) InsertPrefix(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, insertPrefix, name)
	return err
}

const namePrefix = `-- name: NamePrefix :one
select name, count from mg.namePrefix where name = $1
`

func (q *Queries) NamePrefix(ctx context.Context, name string) (MgNameprefix, error) {
	row := q.db.QueryRow(ctx, namePrefix, name)
	var i MgNameprefix
	err := row.Scan(&i.Name, &i.Count)
	return i, err
}

const read = `-- name: Read :many
select db, fid, start, data from mg.dbentry where db = $1 and fid = $2 and start between $3 and $4 order by start
`

type ReadParams struct {
	Db      int64
	Fid     int64
	Start   int64
	Start_2 int64
}

func (q *Queries) Read(ctx context.Context, arg ReadParams) ([]MgDbentry, error) {
	rows, err := q.db.Query(ctx, read,
		arg.Db,
		arg.Fid,
		arg.Start,
		arg.Start_2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MgDbentry
	for rows.Next() {
		var i MgDbentry
		if err := rows.Scan(
			&i.Db,
			&i.Fid,
			&i.Start,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeDevice = `-- name: RevokeDevice :exec
delete from mg.device_org where device = $1 and org = $2
`

type RevokeDeviceParams struct {
	Device string
	Org    string
}

func (q *Queries) RevokeDevice(ctx context.Context, arg RevokeDeviceParams) error {
	_, err := q.db.Exec(ctx, revokeDevice, arg.Device, arg.Org)
	return err
}

const trim = `-- name: Trim :exec
delete from mg.dbentry where db = $1 and fid = $2 and start between $3 and $4
`

type TrimParams struct {
	Db      int64
	Fid     int64
	Start   int64
	Start_2 int64
}

func (q *Queries) Trim(ctx context.Context, arg TrimParams) error {
	_, err := q.db.Exec(ctx, trim,
		arg.Db,
		arg.Fid,
		arg.Start,
		arg.Start_2,
	)
	return err
}

const updatePrefix = `-- name: UpdatePrefix :one
update mg.namePrefix set count=count+1 where name = $1 returning count
`

func (q *Queries) UpdatePrefix(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRow(ctx, updatePrefix, name)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const write = `-- name: Write :exec
insert into mg.dbentry (db, fid, start, data) values ($1, $2, $3, $4)
`

type WriteParams struct {
	Db    int64
	Fid   int64
	Start int64
	Data  []byte
}

func (q *Queries) Write(ctx context.Context, arg WriteParams) error {
	_, err := q.db.Exec(ctx, write,
		arg.Db,
		arg.Fid,
		arg.Start,
		arg.Data,
	)
	return err
}
