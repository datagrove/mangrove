// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package mangrove_sql

import (
	"context"
)

const getCredential = `-- name: GetCredential :many
select did, name, webauthn from credential
where name = $1
`

func (q *Queries) GetCredential(ctx context.Context, name string) ([]Credential, error) {
	rows, err := q.db.QueryContext(ctx, getCredential, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Credential
	for rows.Next() {
		var i Credential
		if err := rows.Scan(&i.Did, &i.Name, &i.Webauthn); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSegment = `-- name: GetSegment :many
select fid, start, data, ts from segment 
where fid = $1 and start > $2
`

type GetSegmentParams struct {
	Fid   int32
	Start int64
}

func (q *Queries) GetSegment(ctx context.Context, arg GetSegmentParams) ([]Segment, error) {
	rows, err := q.db.QueryContext(ctx, getSegment, arg.Fid, arg.Start)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Segment
	for rows.Next() {
		var i Segment
		if err := rows.Scan(
			&i.Fid,
			&i.Start,
			&i.Data,
			&i.Ts,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
