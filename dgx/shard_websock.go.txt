package main

import (
	"crypto/rand"
	"crypto/sha256"
	"sync"

	"github.com/cornelk/hashmap"
	"github.com/datagrove/mangrove/ucan"
	"github.com/fxamacker/cbor/v2"

	"flag"

	"github.com/lesismal/nbio/nbhttp/websocket"
)


/*
// this needs to send it to the the other connection
func handleWebSocket(w http.ResponseWriter, r *http.Request) {
	// Upgrade the HTTP connection to a WebSocket connection
	upgrader.CheckOrigin = func(r *http.Request) bool { return true }
	conn, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Println(err)
		return
	}
	id := r.URL.Query().Get("id")
	n, _ := strconv.Atoi(id)

	device := &ClientConn{Conn: conn}
	siteMap.device.Store(n, device)

	for {
		// Read incoming message from the client
		_, message, err := conn.ReadMessage()
		if err != nil {
			log.Println(err)
			break
		}
		log.Printf("received: %s,%d", message, n)

		// Parse the message as a JSON object
		var msg Rpc
		err = json.Unmarshal(message, &msg)
		if err != nil {
			log.Println(err)
			continue
		}
		fail := func(s string) {
			reply := RpcReply{
				Id:    msg.Id,
				Error: s,
			}
			b, _ := json.Marshal(reply)
			conn.WriteMessage(websocket.TextMessage, b)
		}
		_ = fail
		ok := func(s any) {
			reply := RpcReply{
				Id:     msg.Id,
				Result: s,
			}
			b, _ := json.Marshal(reply)
			conn.WriteMessage(websocket.TextMessage, b)
		}
		switch msg.Method {
		case "open":
			// either return the current lessee or set the lessee to this connection
			var params struct {
				Id    int64  `json:"id"`
				Offer string `json:"offer"`
			}
			err = json.Unmarshal(msg.Params, &params)
			if err != nil {
				log.Println(err)
				continue
			}
			s, _ := siteMap.site.LoadOrStore(params.Id, &Site{})
			site := s.(*Site)
			site.Lock()
			if site.lessee == nil {
				site.lessee = conn
				ok(true)
			} else {
				// send the offer to the lessee
				ok(false)
				site.lessee.WriteMessage(websocket.TextMessage, msg.Params)
			}
		case "to":
			var params struct {
				Id int64 `json:"id"`
				// offer itself needs some auth information in it.
				// we need some rate limiting here
				Offer string `json:"offer"`
			}
			err = json.Unmarshal(msg.Params, &params)
			if err != nil {
				log.Println(err)
				continue
			}
			d, _ := siteMap.device.Load(params.Id)
			device := d.(*Device)
			device.Conn.WriteMessage(websocket.TextMessage, msg.Params)

			// Handle the message based on its type
			// switch msg.Type {
			// case "offer":
			// 	// Handle offer message
			// 	fmt.Println("Received offer:", msg.Data)
			// 	// ...
			// case "answer":
			// 	// Handle answer message
			// 	fmt.Println("Received answer:", msg.Data)
			// 	// ...
			// case "ice":
			// 	// Handle ICE candidate message
			// 	fmt.Println("Received ICE candidate:", msg.Data)
			// 	// ...
			// default:
			// 	log.Println("Unknown message type:", msg.Type)
			// }
		}
	}
}*/



var (
	onDataFrame      = flag.Bool("UseOnDataFrame", false, "Server will use OnDataFrame api instead of OnMessage")
	errBeforeUpgrade = flag.Bool("error-before-upgrade", false, "return an error on upgrade with body")
)

// func newUpgrader() *websocket.Upgrader {
// 	u := websocket.NewUpgrader()
// 	if *onDataFrame {
// 		u.OnDataFrame(func(c *websocket.Conn, messageType websocket.MessageType, fin bool, data []byte) {
// 			// echo
// 			c.WriteFrame(messageType, true, fin, data)
// 		})
// 	} else {
// 		u.OnMessage(func(c *websocket.Conn, messageType websocket.MessageType, data []byte) {
// 			// echo
// 			c.WriteMessage(messageType, data)
// 		})
// 	}

// 	u.OnClose(func(c *websocket.Conn, err error) {
// 		fmt.Println("OnClose:", c.RemoteAddr().String(), err)
// 	})
// 	return u
// }

// start one websocket server per shard
// start on an array of ports to support 1M connections per shard.
// func StartWs(address []string, fn func(u websocket.Upgrader)) {

// 	onWebsocket := func(w http.ResponseWriter, r *http.Request) {
// 		if *errBeforeUpgrade {
// 			w.WriteHeader(http.StatusForbidden)
// 			w.Write([]byte("returning an error"))
// 			return
// 		}
// 		// time.Sleep(time.Second * 5)
// 		upgrader := newUpgrader()
// 		conn, err := upgrader.Upgrade(w, r, nil)
// 		if err != nil {
// 			panic(err)
// 		}
// 		conn.SetReadDeadline(time.Time{})

// 	}

// 	flag.Parse()
// 	mux := &http.ServeMux{}
// 	mux.HandleFunc("/ws", onWebsocket)

// 	svr := nbhttp.NewServer(nbhttp.Config{
// 		Network: "tcp",
// 		Addrs:   address,
// 		Handler: mux,
// 	})

// 	err := svr.Start()
// 	if err != nil {
// 		fmt.Printf("nbio.Start failed: %v\n", err)
// 		return
// 	}

// 	interrupt := make(chan os.Signal, 1)
// 	signal.Notify(interrupt, os.Interrupt)
// 	<-interrupt
// 	ctx, cancel := context.WithTimeout(context.Background(), time.Second*5)
// 	defer cancel()
// 	svr.Shutdown(ctx)
// }
